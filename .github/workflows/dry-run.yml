name: dry-run in kind

env:
  kind_version: "v0.14.0"
  kind_kubectl_version: "v1.24.1"
  argocd_params: "--grpc-web --insecure --server argocd.127.0.0.1.nip.io"
  argocd_version: "2.3.4"
  argocd_projects_dir: "argocd/projects"
  go_version: '>=1.18.0'

on:
  pull_request:
    branches:
      - main
  workflow_run:
    workflows:
      - "trivy check"
      - "sh-checker"
      - "terrascan"
      - "tflint"
      - "tfsec"
    branches: [main]
    types:
      - completed

jobs:
  dry-run:
    runs-on: ubuntu-latest
    # if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Clone repo
        uses: actions/checkout@v3

      - name: show env vars
        run: env

      - name: Install make
        run: |
          sudo apt update
          sudo apt install make -y

      - name: install golang
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.go_version }}

      - name: show golang version
        run: go version

      - name: init kind-action
        uses: helm/kind-action@main
        with:
          version: "${{ env.kind_version }}"
          kubectl_version: "${{ env.kind_kubectl_version }}"
          install_only: true

      - name: create cluster
        run: make kind-create

      - name: Show kubectl version
        run: kubectl version

      - name: Show nodes and cluster-info
        run: kubectl get nodes -o wide; kubectl cluster-info

      - name: fix prometheus-operator's CRDs
        run: make kind-install-crds

      - name: install cilium
        run: make cilium-install

      - name: Show all pods
        run: sleep 5 && kubectl get pods -A

      - name: install ArgoCD
        run: make argocd-deploy

      - name: install nginx
        run: make nginx-ingress-deploy

      - name: install cert-manager
        run: make cert-manager-deploy

      - name: wait
        run: sleep 10

      - name: Show all pods
        run: kubectl get pods -A

      - name: Show all services
        run: kubectl get svc -A

      - name: init argo-cd
        uses: clowdhaus/argo-cd-action/@main
        with:
          version: ${{ env.argocd_version }}
          command: version
          options: --client

      - name: create all argo-cd projects
        run: kubectl apply -f ${{ env.argocd_projects_dir }}

      - name: Show all argo-cd apps
        run: argocd app list ${{ env.argocd_params }}

      - name: run test-network test - assets
        run: make test-network-apply-assets

      - name: run test-network test - wait to assets
        run: |
          kubectl wait -n test-network --timeout=2m --for=condition=available deployment client
          kubectl wait -n test-network --timeout=2m --for=condition=available deployment podinfo

      - name: run test-network test - debug
        run: kubectl -n test-network get po,svc,cnp

      - name: run test-network test - check
        run: |
          rs=$(make test-network-check-status)
          echo "$rs"
          echo "$rs" |grep "greetings from podinfo"

      - name: install e2e dependencies
        run: |
          cd tests/e2e
          go mod vendor
          go env -w GO111MODULE=auto

      - name: run e2e tests
        id: runE2eTests
        run: |
          cd tests/e2e
          go test

      - name: debug e2e tests
        if: failure() && steps.runE2eTests.outcome == 'failure'
        run: |
          kubectl get pods -A -o wide || true
          kubectl get svc -A || true
          kubectl get cnp -A || true
          kubectl get ccnp -A || true
          kubectl get issuers -A || true
          kubectl get certificates -A || true
